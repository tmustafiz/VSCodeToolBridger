{
  "name": "vscode-adaptive-tools-bridger",
  "displayName": "Adaptive Tools Bridger",
  "description": "Intelligent VSCode extension that dynamically adapts to any MCP servers, providing context-aware assistance across multiple domains (database, git, file-system, web, and more)",
  "version": "0.1.0",
  "publisher": "toolsbridger",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/your-username/vscode-tools-bridger.git"
  },
  "engines": {
    "vscode": "^1.95.0"
  },
  "categories": [
    "AI",
    "Other"
  ],
  "keywords": [
    "mcp",
    "model-context-protocol",
    "language-model-tools",
    "ai",
    "adaptive",
    "dynamic",
    "tools",
    "database",
    "git",
    "file-system",
    "multi-domain",
    "context-aware",
    "intelligent-assistant"
  ],
  "main": "./out/extension.js",
      "contributes": {
      "commands": [
        {
          "command": "toolsBridger.addMcpServer",
          "title": "Add MCP Server",
          "category": "Tools Bridger"
        },
        {
          "command": "toolsBridger.removeMcpServer",
          "title": "Remove MCP Server", 
          "category": "Tools Bridger"
        },
        {
          "command": "toolsBridger.listTools",
          "title": "List Available Tools",
          "category": "Tools Bridger"
        }
      ],
      "configuration": {
      "title": "Adaptive Tools Bridger",
      "properties": {
        "toolsBridger.serverType": {
          "type": "string",
          "enum": [
            "streamable",
            "sse",
            "stdio"
          ],
          "default": "streamable",
          "description": "Type of MCP server transport to use",
          "enumDescriptions": [
            "Streamable HTTP transport for modern MCP servers (recommended)",
            "Server-Sent Events (SSE) transport for HTTP-based MCP servers (deprecated)",
            "Standard I/O transport for local MCP server processes"
          ]
        },
        "toolsBridger.serverUrl": {
          "type": "string",
          "default": "http://localhost:8081/mcp-server/",
          "description": "URL of the MCP server (used with Streamable HTTP and SSE transports)",
          "pattern": "^https?://.*",
          "patternErrorMessage": "Must be a valid HTTP or HTTPS URL",
          "when": "config.toolsBridger.serverType != 'stdio'"
        },
        "toolsBridger.serverCommand": {
          "type": "string",
          "default": "",
          "description": "Command to start the MCP server (used with stdio transport)",
          "when": "config.toolsBridger.serverType == 'stdio'"
        },
        "toolsBridger.serverArgs": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [],
          "description": "Arguments for the MCP server command (used with stdio transport)",
          "when": "config.toolsBridger.serverType == 'stdio'"
        },
        "toolsBridger.fallbackModel": {
          "type": "string",
          "enum": ["gpt-4.1", "gpt-4o", "gpt-4o-mini", "auto"],
          "default": "auto",
          "description": "Preferred model to use when the selected model doesn't support tools",
          "enumDescriptions": [
            "Always use GPT-4.1 as fallback (best quality, superior coding)",
            "Always use GPT-4o as fallback (good quality, multimodal)",
            "Always use GPT-4o-mini as fallback (faster, good quality)",
            "Automatically select the best available tool-capable model"
          ]
        },
        "toolsBridger.mcpServers": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier for the MCP server"
              },
              "label": {
                "type": "string",
                "description": "Display name for the MCP server"
              },
              "command": {
                "type": "string",
                "description": "Command to start the MCP server"
              },
              "args": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Arguments for the MCP server command"
              },
              "env": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                },
                "description": "Environment variables for the MCP server"
              },
              "participantId": {
                "type": "string",
                "description": "Chat participant ID to associate with this server's tools"
              },
              "categories": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Categories for tools from this server"
              }
            },
            "required": ["id", "label", "command"]
          },
          "default": [],
          "description": "Configuration for MCP servers"
        }
      }
    },
    "chatParticipants": [
      {
        "id": "adaptive-tools-participant.toolsAgent",
        "name": "toolsAgent",
        "description": "Adaptive assistant that dynamically uses available MCP tools for various tasks",
        "isSticky": true,
        "commands": [
          {
            "name": "list",
            "description": "List all available tools from connected MCP servers"
          },
          {
            "name": "capabilities",
            "description": "Show current capabilities based on available tools"
          },
          {
            "name": "servers",
            "description": "List connected MCP servers and their tools"
          }
        ],
        "disambiguation": [
          {
            "category": "database",
            "description": "Database operations and queries",
            "examples": [
              "query the database",
              "get table schema",
              "execute SQL",
              "generate ERD diagram"
            ]
          },
          {
            "category": "development",
            "description": "Development and version control operations",
            "examples": [
              "check git status",
              "review code changes",
              "manage repositories"
            ]
          },
          {
            "category": "file-system",
            "description": "File system operations",
            "examples": [
              "search files",
              "read file contents",
              "manage directories"
            ]
          },
          {
            "category": "general",
            "description": "General utility operations",
            "examples": [
              "process data",
              "analyze information",
              "perform calculations"
            ]
          }
        ]
      }
    ],
    "languageModelTools": [
      {
        "name": "tool_proxy_database",
        "tags": [
          "mcp",
          "database",
          "proxy",
          "dynamic"
        ],
        "toolReferenceName": "proxyDatabase",
        "displayName": "Database Tool Proxy",
        "modelDescription": "Proxy tool for executing database-related MCP tools from connected servers",
        "canBeReferencedInPrompt": true,
        "icon": "$(database)",
        "when": "chatLocation == 'panel'",
        "inputSchema": {
          "type": "object",
          "properties": {
            "toolName": {
              "type": "string",
              "description": "The name of the MCP tool to execute"
            },
            "participantId": {
              "type": "string",
              "description": "The chat participant ID (e.g., 'dbTools', 'postgres')"
            },
            "arguments": {
              "type": "object",
              "description": "Arguments to pass to the MCP tool",
              "additionalProperties": true
            }
          },
          "required": [
            "toolName",
            "participantId"
          ],
          "additionalProperties": false
        }
      },
      {
        "name": "tool_proxy_query",
        "tags": [
          "mcp",
          "query",
          "search",
          "proxy",
          "dynamic"
        ],
        "toolReferenceName": "proxyQuery",
        "displayName": "Query Tool Proxy",
        "modelDescription": "Proxy tool for executing query and search-related MCP tools from connected servers",
        "canBeReferencedInPrompt": true,
        "icon": "$(search)",
        "when": "chatLocation == 'panel'",
        "inputSchema": {
          "type": "object",
          "properties": {
            "toolName": {
              "type": "string",
              "description": "The name of the MCP tool to execute"
            },
            "participantId": {
              "type": "string",
              "description": "The chat participant ID (e.g., 'dbTools', 'fileSearch')"
            },
            "arguments": {
              "type": "object",
              "description": "Arguments to pass to the MCP tool",
              "additionalProperties": true
            }
          },
          "required": [
            "toolName",
            "participantId"
          ],
          "additionalProperties": false
        }
      },
      {
        "name": "tool_proxy_analysis",
        "tags": [
          "mcp",
          "analysis",
          "generation",
          "proxy",
          "dynamic"
        ],
        "toolReferenceName": "proxyAnalysis",
        "displayName": "Analysis Tool Proxy",
        "modelDescription": "Proxy tool for executing analysis and generation-related MCP tools from connected servers",
        "canBeReferencedInPrompt": true,
        "icon": "$(graph)",
        "when": "chatLocation == 'panel'",
        "inputSchema": {
          "type": "object",
          "properties": {
            "toolName": {
              "type": "string",
              "description": "The name of the MCP tool to execute"
            },
            "participantId": {
              "type": "string",
              "description": "The chat participant ID (e.g., 'dbTools', 'dataAnalysis')"
            },
            "arguments": {
              "type": "object",
              "description": "Arguments to pass to the MCP tool",
              "additionalProperties": true
            }
          },
          "required": [
            "toolName",
            "participantId"
          ],
          "additionalProperties": false
        }
      },
      {
        "name": "tool_proxy_general",
        "tags": [
          "mcp",
          "general",
          "utility",
          "proxy",
          "dynamic"
        ],
        "toolReferenceName": "proxyGeneral",
        "displayName": "General Tool Proxy",
        "modelDescription": "Proxy tool for executing general-purpose MCP tools from connected servers",
        "canBeReferencedInPrompt": true,
        "icon": "$(tools)",
        "when": "chatLocation == 'panel'",
        "inputSchema": {
          "type": "object",
          "properties": {
            "toolName": {
              "type": "string",
              "description": "The name of the MCP tool to execute"
            },
            "participantId": {
              "type": "string",
              "description": "The chat participant ID (e.g., 'utilities', 'fileSystem')"
            },
            "arguments": {
              "type": "object",
              "description": "Arguments to pass to the MCP tool",
              "additionalProperties": true
            }
          },
          "required": [
            "toolName",
            "participantId"
          ],
          "additionalProperties": false
        }
      }
    ],
    "mcpServerDefinitionProviders": [
      {
        "id": "toolsBridger",
        "label": "Dynamic MCP server discovery for adaptive tools bridger"
      }
    ]
  },
  "activationEvents": [
    "onStartupFinished"
  ],
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "pretest": "npm run compile && npm run lint",
    "lint": "eslint src",
    "test": "node ./out/test/runTest.js",
    "package": "vsce package"
  },
  "devDependencies": {
    "@eslint/js": "^9.0.0",
    "@types/node": "20.x",
    "@types/vscode": "^1.95.0",
    "@vscode/vsce": "^3.0.0",
    "eslint": "^8.57.0",
    "typescript": "^5.4.5",
    "typescript-eslint": "^8.0.0"
  },
  "dependencies": {
    "@modelcontextprotocol/sdk": "^1.15.0",
    "@vscode/prompt-tsx": "^0.2.11-alpha",
    "ws": "^8.18.0"
  }
}
